{"ast":null,"code":"import _regeneratorRuntime from \"/root/FrontPlatform/vue-front/node_modules/@babel/runtime/helpers/esm/regeneratorRuntime.js\";\nimport _asyncToGenerator from \"/root/FrontPlatform/vue-front/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport _toConsumableArray from \"/root/FrontPlatform/vue-front/node_modules/@babel/runtime/helpers/esm/toConsumableArray.js\";\nimport _slicedToArray from \"/root/FrontPlatform/vue-front/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport _defineProperty from \"/root/FrontPlatform/vue-front/node_modules/@babel/runtime/helpers/esm/defineProperty.js\";\nimport \"core-js/modules/es.array.concat.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.set.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.map.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.every.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.array.splice.js\";\nimport { defineComponent, toRefs, computed, reactive, ref, provide, resolveComponent, openBlock, createElementBlock, normalizeClass, createBlock, mergeProps, withCtx, createVNode, Fragment, renderList } from \"vue\";\nimport { getPrefixCls } from \"../_utils/global-config.js\";\nimport { TreeInjectionKey } from \"./context.js\";\nimport usePickSlots from \"../_hooks/use-pick-slots.js\";\nimport { isLeafNode, isNodeSelectable, isNodeExpandable } from \"./utils/index.js\";\nimport { isNodeCheckable, getCheckedStateByCheck } from \"./utils/check-utils.js\";\nimport TreeNode from \"./node.js\";\nimport { isUndefined, isFunction, isArray } from \"../_utils/is.js\";\nimport useMergeState from \"../_hooks/use-merge-state.js\";\nimport useCheckedState from \"./hooks/use-checked-state.js\";\nimport useTreeData from \"./hooks/use-tree-data.js\";\nimport VirtualList from \"../_components/virtual-list-v2/virtual-list.js\";\nimport _export_sfc from \"../_virtual/plugin-vue_export-helper.js\";\nvar _sfc_main = defineComponent({\n  name: \"Tree\",\n  components: {\n    VirtualList: VirtualList,\n    TreeNode: TreeNode\n  },\n  props: {\n    size: {\n      type: String,\n      \"default\": \"medium\"\n    },\n    blockNode: {\n      type: Boolean\n    },\n    defaultExpandAll: {\n      type: Boolean,\n      \"default\": true\n    },\n    multiple: {\n      type: Boolean\n    },\n    checkable: {\n      type: [Boolean, String, Function],\n      \"default\": false\n    },\n    selectable: {\n      type: [Boolean, Function],\n      \"default\": true\n    },\n    checkStrictly: {\n      type: Boolean\n    },\n    checkedStrategy: {\n      type: String,\n      \"default\": \"all\"\n    },\n    defaultSelectedKeys: {\n      type: Array\n    },\n    selectedKeys: {\n      type: Array\n    },\n    defaultCheckedKeys: {\n      type: Array\n    },\n    checkedKeys: {\n      type: Array\n    },\n    defaultExpandedKeys: {\n      type: Array\n    },\n    expandedKeys: {\n      type: Array\n    },\n    data: {\n      type: Array,\n      \"default\": function _default() {\n        return [];\n      }\n    },\n    fieldNames: {\n      type: Object\n    },\n    showLine: {\n      type: Boolean\n    },\n    loadMore: {\n      type: Function\n    },\n    draggable: {\n      type: Boolean\n    },\n    allowDrop: {\n      type: Function\n    },\n    filterTreeNode: {\n      type: Function\n    },\n    virtualListProps: {\n      type: Object\n    },\n    defaultExpandSelected: {\n      type: Boolean\n    },\n    defaultExpandChecked: {\n      type: Boolean\n    },\n    autoExpandParent: {\n      type: Boolean,\n      \"default\": true\n    },\n    halfCheckedKeys: {\n      type: Array\n    },\n    onlyCheckLeaf: {\n      type: Boolean,\n      \"default\": false\n    },\n    animation: {\n      type: Boolean,\n      \"default\": true\n    },\n    actionOnNodeClick: {\n      type: String\n    },\n    disableSelectActionOnly: {\n      type: Boolean,\n      \"default\": false\n    }\n  },\n  emits: {\n    \"select\": function select(selectedKeys, data) {\n      return true;\n    },\n    \"update:selectedKeys\": function updateSelectedKeys(selectedKeys) {\n      return true;\n    },\n    \"check\": function check(checkedKeys, data) {\n      return true;\n    },\n    \"update:checkedKeys\": function updateCheckedKeys(checkedKeys) {\n      return true;\n    },\n    \"update:halfCheckedKeys\": function updateHalfCheckedKeys(halfCheckedKeys) {\n      return true;\n    },\n    \"expand\": function expand(expandKeys, data) {\n      return true;\n    },\n    \"update:expandedKeys\": function updateExpandedKeys(expandKeys) {\n      return true;\n    },\n    \"dragStart\": function dragStart(ev, node) {\n      return true;\n    },\n    \"dragEnd\": function dragEnd(ev, node) {\n      return true;\n    },\n    \"dragOver\": function dragOver(ev, node) {\n      return true;\n    },\n    \"dragLeave\": function dragLeave(ev, node) {\n      return true;\n    },\n    \"drop\": function drop(data) {\n      return true;\n    }\n  },\n  setup: function setup(props, _ref) {\n    var emit = _ref.emit,\n      slots = _ref.slots;\n    var _toRefs = toRefs(props),\n      propTreeData = _toRefs.data,\n      showLine = _toRefs.showLine,\n      multiple = _toRefs.multiple,\n      loadMore = _toRefs.loadMore,\n      checkStrictly = _toRefs.checkStrictly,\n      propCheckedKeys = _toRefs.checkedKeys,\n      defaultCheckedKeys = _toRefs.defaultCheckedKeys,\n      propSelectedKeys = _toRefs.selectedKeys,\n      defaultSelectedKeys = _toRefs.defaultSelectedKeys,\n      propExpandedKeys = _toRefs.expandedKeys,\n      defaultExpandedKeys = _toRefs.defaultExpandedKeys,\n      checkedStrategy = _toRefs.checkedStrategy,\n      selectable = _toRefs.selectable,\n      checkable = _toRefs.checkable,\n      blockNode = _toRefs.blockNode,\n      fieldNames = _toRefs.fieldNames,\n      size = _toRefs.size,\n      defaultExpandAll = _toRefs.defaultExpandAll,\n      filterTreeNode = _toRefs.filterTreeNode,\n      draggable = _toRefs.draggable,\n      _allowDrop = _toRefs.allowDrop,\n      defaultExpandSelected = _toRefs.defaultExpandSelected,\n      defaultExpandChecked = _toRefs.defaultExpandChecked,\n      autoExpandParent = _toRefs.autoExpandParent,\n      halfCheckedKeys = _toRefs.halfCheckedKeys,\n      onlyCheckLeaf = _toRefs.onlyCheckLeaf,\n      animation = _toRefs.animation;\n    var prefixCls = getPrefixCls(\"tree\");\n    var classNames = computed(function () {\n      var _ref2;\n      return [\"\".concat(prefixCls), (_ref2 = {}, _defineProperty(_ref2, \"\".concat(prefixCls, \"-checkable\"), checkable.value), _defineProperty(_ref2, \"\".concat(prefixCls, \"-show-line\"), showLine.value), _ref2), \"\".concat(prefixCls, \"-size-\").concat(size.value)];\n    });\n    var switcherIcon = usePickSlots(slots, \"switcher-icon\");\n    var loadingIcon = usePickSlots(slots, \"loading-icon\");\n    var dragIcon = usePickSlots(slots, \"drag-icon\");\n    var nodeIcon = usePickSlots(slots, \"icon\");\n    var nodeTitle = usePickSlots(slots, \"title\");\n    var nodeExtra = usePickSlots(slots, \"extra\");\n    var _useTreeData = useTreeData(reactive({\n        treeData: propTreeData,\n        selectable: selectable,\n        showLine: showLine,\n        blockNode: blockNode,\n        checkable: checkable,\n        fieldNames: fieldNames,\n        loadMore: loadMore,\n        draggable: draggable\n      })),\n      treeData = _useTreeData.treeData,\n      flattenTreeData = _useTreeData.flattenTreeData,\n      key2TreeNode = _useTreeData.key2TreeNode;\n    var _useCheckedState = useCheckedState(reactive({\n        defaultCheckedKeys: defaultCheckedKeys,\n        checkedKeys: propCheckedKeys,\n        checkStrictly: checkStrictly,\n        key2TreeNode: key2TreeNode,\n        halfCheckedKeys: halfCheckedKeys,\n        onlyCheckLeaf: onlyCheckLeaf\n      })),\n      checkedKeys = _useCheckedState.checkedKeys,\n      indeterminateKeys = _useCheckedState.indeterminateKeys,\n      setCheckedState = _useCheckedState.setCheckedState;\n    var _useMergeState = useMergeState((defaultSelectedKeys == null ? void 0 : defaultSelectedKeys.value) || [], reactive({\n        value: propSelectedKeys\n      })),\n      _useMergeState2 = _slicedToArray(_useMergeState, 2),\n      selectedKeys = _useMergeState2[0],\n      setSelectedState = _useMergeState2[1];\n    var loadingKeys = ref([]);\n    var dragNode = ref();\n    function getDefaultExpandedKeys() {\n      if (defaultExpandedKeys == null ? void 0 : defaultExpandedKeys.value) {\n        var expandedKeysSet = new Set([]);\n        defaultExpandedKeys.value.forEach(function (_key) {\n          if (expandedKeysSet.has(_key)) return;\n          var node = key2TreeNode.value.get(_key);\n          if (!node) return;\n          [].concat(_toConsumableArray(autoExpandParent.value ? node.pathParentKeys : []), [_key]).forEach(function (_key2) {\n            return expandedKeysSet.add(_key2);\n          });\n        });\n        return _toConsumableArray(expandedKeysSet);\n      }\n      if (defaultExpandAll.value) {\n        return flattenTreeData.value.filter(function (node) {\n          return node.children && node.children.length;\n        }).map(function (node) {\n          return node.key;\n        });\n      }\n      if (defaultExpandSelected.value || defaultExpandChecked.value) {\n        var _expandedKeysSet = new Set([]);\n        var addToExpandKeysSet = function addToExpandKeysSet(keys) {\n          keys.forEach(function (key) {\n            var node = key2TreeNode.value.get(key);\n            if (!node) return;\n            (node.pathParentKeys || []).forEach(function (k) {\n              return _expandedKeysSet.add(k);\n            });\n          });\n        };\n        if (defaultExpandSelected.value) {\n          addToExpandKeysSet(selectedKeys.value);\n        }\n        if (defaultExpandChecked.value) {\n          addToExpandKeysSet(checkedKeys.value);\n        }\n        return _toConsumableArray(_expandedKeysSet);\n      }\n      return [];\n    }\n    var _useMergeState3 = useMergeState(getDefaultExpandedKeys(), reactive({\n        value: propExpandedKeys\n      })),\n      _useMergeState4 = _slicedToArray(_useMergeState3, 2),\n      expandedKeys = _useMergeState4[0],\n      setExpandState = _useMergeState4[1];\n    var currentExpandKeys = ref([]);\n    var visibleTreeNodeList = computed(function () {\n      var expandedKeysSet = new Set(expandedKeys.value);\n      var currentExpandKeysSet = new Set(currentExpandKeys.value);\n      return flattenTreeData.value.filter(function (node) {\n        var _a;\n        var passFilter = !filterTreeNode || !filterTreeNode.value || (filterTreeNode == null ? void 0 : filterTreeNode.value(node.treeNodeData));\n        if (!passFilter) return false;\n        var isRoot = isUndefined(node.parentKey);\n        var isVisibleNode = (_a = node.pathParentKeys) == null ? void 0 : _a.every(function (_key) {\n          return expandedKeysSet.has(_key) && !currentExpandKeysSet.has(_key);\n        });\n        return isRoot || isVisibleNode;\n      });\n    });\n    function getPublicCheckedKeys(rawCheckedKeys) {\n      var rawCheckedStrategy = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : checkedStrategy.value;\n      var publicCheckedKeys = _toConsumableArray(rawCheckedKeys);\n      if (rawCheckedStrategy === \"parent\") {\n        publicCheckedKeys = rawCheckedKeys.filter(function (_key) {\n          var item = key2TreeNode.value.get(_key);\n          return item && !(!isUndefined(item.parentKey) && rawCheckedKeys.includes(item.parentKey));\n        });\n      } else if (rawCheckedStrategy === \"child\") {\n        publicCheckedKeys = rawCheckedKeys.filter(function (_key) {\n          var _a, _b;\n          return !((_b = (_a = key2TreeNode.value.get(_key)) == null ? void 0 : _a.children) == null ? void 0 : _b.length);\n        });\n      }\n      return publicCheckedKeys;\n    }\n    function getNodes(keys) {\n      return keys.map(function (key) {\n        var _a;\n        return ((_a = key2TreeNode.value.get(key)) == null ? void 0 : _a.treeNodeData) || void 0;\n      }).filter(Boolean);\n    }\n    function emitCheckEvent(options) {\n      var targetKey = options.targetKey,\n        targetChecked = options.targetChecked,\n        newCheckedKeys = options.newCheckedKeys,\n        newIndeterminateKeys = options.newIndeterminateKeys,\n        event = options.event;\n      var targetNode = targetKey ? key2TreeNode.value.get(targetKey) : void 0;\n      var publicCheckedKeys = getPublicCheckedKeys(newCheckedKeys);\n      emit(\"check\", publicCheckedKeys, {\n        checked: targetChecked,\n        node: targetNode == null ? void 0 : targetNode.treeNodeData,\n        checkedNodes: getNodes(publicCheckedKeys),\n        halfCheckedKeys: newIndeterminateKeys,\n        halfCheckedNodes: getNodes(newIndeterminateKeys),\n        e: event\n      });\n      emit(\"update:checkedKeys\", publicCheckedKeys);\n      emit(\"update:halfCheckedKeys\", newIndeterminateKeys);\n    }\n    function emitSelectEvent(options) {\n      var targetKey = options.targetKey,\n        targetSelected = options.targetSelected,\n        newSelectedKeys = options.newSelectedKeys,\n        event = options.event;\n      var targetNode = targetKey ? key2TreeNode.value.get(targetKey) : void 0;\n      emit(\"select\", newSelectedKeys, {\n        selected: targetSelected,\n        node: targetNode == null ? void 0 : targetNode.treeNodeData,\n        selectedNodes: getNodes(newSelectedKeys),\n        e: event\n      });\n      emit(\"update:selectedKeys\", newSelectedKeys);\n    }\n    function emitExpandEvent(options) {\n      var targetKey = options.targetKey,\n        targetExpanded = options.targetExpanded,\n        newExpandedKeys = options.newExpandedKeys,\n        event = options.event;\n      var targetNode = targetKey ? key2TreeNode.value.get(targetKey) : void 0;\n      emit(\"expand\", newExpandedKeys, {\n        expanded: targetExpanded,\n        node: targetNode == null ? void 0 : targetNode.treeNodeData,\n        expandedNodes: getNodes(newExpandedKeys),\n        e: event\n      });\n      emit(\"update:expandedKeys\", newExpandedKeys);\n    }\n    function setCheckedKeys(keys) {\n      var _setCheckedState = setCheckedState(keys, [], true),\n        _setCheckedState2 = _slicedToArray(_setCheckedState, 2),\n        newCheckedKeys = _setCheckedState2[0],\n        newIndeterminateKeys = _setCheckedState2[1];\n      emitCheckEvent({\n        newCheckedKeys: newCheckedKeys,\n        newIndeterminateKeys: newIndeterminateKeys\n      });\n    }\n    function setSelectedKeys(keys) {\n      var newSelectedKeys = keys;\n      if (!multiple.value && keys.length > 1) {\n        newSelectedKeys = [keys[0]];\n      }\n      setSelectedState(newSelectedKeys);\n      emitSelectEvent({\n        newSelectedKeys: newSelectedKeys\n      });\n    }\n    function setExpandedKeys(keys) {\n      currentExpandKeys.value = [];\n      setExpandState(keys);\n      emitExpandEvent({\n        newExpandedKeys: keys\n      });\n    }\n    function checkNodes(keys, checked, targetKey) {\n      if (!keys.length) return;\n      var newCheckedKeys = _toConsumableArray(checkedKeys.value);\n      var newIndeterminateKeys = _toConsumableArray(indeterminateKeys.value);\n      keys.forEach(function (key) {\n        var node = key2TreeNode.value.get(key);\n        if (node) {\n          var _getCheckedStateByChe = getCheckedStateByCheck({\n            node: node,\n            checked: checked,\n            checkedKeys: _toConsumableArray(newCheckedKeys),\n            indeterminateKeys: _toConsumableArray(newIndeterminateKeys),\n            checkStrictly: checkStrictly.value\n          });\n          var _getCheckedStateByChe2 = _slicedToArray(_getCheckedStateByChe, 2);\n          newCheckedKeys = _getCheckedStateByChe2[0];\n          newIndeterminateKeys = _getCheckedStateByChe2[1];\n        }\n      });\n      setCheckedState(newCheckedKeys, newIndeterminateKeys);\n      emitCheckEvent({\n        targetKey: targetKey,\n        targetChecked: isUndefined(targetKey) ? void 0 : checked,\n        newCheckedKeys: newCheckedKeys,\n        newIndeterminateKeys: newIndeterminateKeys\n      });\n    }\n    function selectNodes(keys, selected, targetKey) {\n      if (!keys.length) return;\n      var newSelectedKeys;\n      if (multiple.value) {\n        var selectedKeysSet = new Set(selectedKeys.value);\n        keys.forEach(function (key) {\n          selected ? selectedKeysSet.add(key) : selectedKeysSet[\"delete\"](key);\n        });\n        newSelectedKeys = _toConsumableArray(selectedKeysSet);\n      } else {\n        newSelectedKeys = selected ? [keys[0]] : [];\n      }\n      setSelectedState(newSelectedKeys);\n      emitSelectEvent({\n        targetKey: targetKey,\n        targetSelected: isUndefined(targetKey) ? void 0 : selected,\n        newSelectedKeys: newSelectedKeys\n      });\n    }\n    function expandNodes(keys, expanded, targetKey) {\n      var expandedKeysSet = new Set(expandedKeys.value);\n      keys.forEach(function (key) {\n        expanded ? expandedKeysSet.add(key) : expandedKeysSet[\"delete\"](key);\n        onExpandEnd(key);\n      });\n      var newExpandedKeys = _toConsumableArray(expandedKeysSet);\n      setExpandState(newExpandedKeys);\n      emitExpandEvent({\n        targetKey: targetKey,\n        targetExpanded: isUndefined(targetKey) ? void 0 : expanded,\n        newExpandedKeys: newExpandedKeys\n      });\n    }\n    function onCheck(checked, key, e) {\n      var node = key2TreeNode.value.get(key);\n      if (!node) return;\n      var _getCheckedStateByChe3 = getCheckedStateByCheck({\n          node: node,\n          checked: checked,\n          checkedKeys: checkedKeys.value,\n          indeterminateKeys: indeterminateKeys.value,\n          checkStrictly: checkStrictly.value\n        }),\n        _getCheckedStateByChe4 = _slicedToArray(_getCheckedStateByChe3, 2),\n        newCheckedKeys = _getCheckedStateByChe4[0],\n        newIndeterminateKeys = _getCheckedStateByChe4[1];\n      setCheckedState(newCheckedKeys, newIndeterminateKeys);\n      emitCheckEvent({\n        targetKey: key,\n        targetChecked: checked,\n        newCheckedKeys: newCheckedKeys,\n        newIndeterminateKeys: newIndeterminateKeys,\n        event: e\n      });\n    }\n    function onSelect(key, e) {\n      var node = key2TreeNode.value.get(key);\n      if (!node) return;\n      var newSelectedKeys;\n      var selected;\n      if (multiple.value) {\n        var selectedKeysSet = new Set(selectedKeys.value);\n        selected = !selectedKeysSet.has(key);\n        selected ? selectedKeysSet.add(key) : selectedKeysSet[\"delete\"](key);\n        newSelectedKeys = _toConsumableArray(selectedKeysSet);\n      } else {\n        selected = true;\n        newSelectedKeys = [key];\n      }\n      setSelectedState(newSelectedKeys);\n      emitSelectEvent({\n        targetKey: key,\n        targetSelected: selected,\n        newSelectedKeys: newSelectedKeys,\n        event: e\n      });\n    }\n    function onExpand(expanded, key, e) {\n      if (currentExpandKeys.value.includes(key)) return;\n      var node = key2TreeNode.value.get(key);\n      if (!node) return;\n      var expandedKeysSet = new Set(expandedKeys.value);\n      expanded ? expandedKeysSet.add(key) : expandedKeysSet[\"delete\"](key);\n      var newExpandedKeys = _toConsumableArray(expandedKeysSet);\n      setExpandState(newExpandedKeys);\n      if (animation.value) {\n        currentExpandKeys.value.push(key);\n      }\n      emitExpandEvent({\n        targetKey: key,\n        targetExpanded: expanded,\n        newExpandedKeys: newExpandedKeys,\n        event: e\n      });\n    }\n    function onExpandEnd(key) {\n      var index = currentExpandKeys.value.indexOf(key);\n      currentExpandKeys.value.splice(index, 1);\n    }\n    var onLoadMore = computed(function () {\n      return (loadMore == null ? void 0 : loadMore.value) ? /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(key) {\n          var node, treeNodeData;\n          return _regeneratorRuntime().wrap(function _callee$(_context) {\n            while (1) switch (_context.prev = _context.next) {\n              case 0:\n                if (isFunction(loadMore.value)) {\n                  _context.next = 2;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 2:\n                node = key2TreeNode.value.get(key);\n                if (node) {\n                  _context.next = 5;\n                  break;\n                }\n                return _context.abrupt(\"return\");\n              case 5:\n                treeNodeData = node.treeNodeData;\n                loadingKeys.value = _toConsumableArray(new Set([].concat(_toConsumableArray(loadingKeys.value), [key])));\n                _context.prev = 7;\n                _context.next = 10;\n                return loadMore.value(treeNodeData);\n              case 10:\n                loadingKeys.value = loadingKeys.value.filter(function (v) {\n                  return v !== key;\n                });\n                onExpand(true, key);\n                if (checkedKeys.value.includes(key)) {\n                  onCheck(true, key);\n                }\n                _context.next = 19;\n                break;\n              case 15:\n                _context.prev = 15;\n                _context.t0 = _context[\"catch\"](7);\n                loadingKeys.value = loadingKeys.value.filter(function (v) {\n                  return v !== key;\n                });\n                console.error(\"[tree]load data error: \", _context.t0);\n              case 19:\n              case \"end\":\n                return _context.stop();\n            }\n          }, _callee, null, [[7, 15]]);\n        }));\n        return function (_x) {\n          return _ref3.apply(this, arguments);\n        };\n      }() : void 0;\n    });\n    var treeContext = reactive({\n      treeProps: props,\n      switcherIcon: switcherIcon,\n      loadingIcon: loadingIcon,\n      dragIcon: dragIcon,\n      nodeIcon: nodeIcon,\n      nodeTitle: nodeTitle,\n      nodeExtra: nodeExtra,\n      treeData: treeData,\n      flattenTreeData: flattenTreeData,\n      key2TreeNode: key2TreeNode,\n      checkedKeys: checkedKeys,\n      indeterminateKeys: indeterminateKeys,\n      selectedKeys: selectedKeys,\n      expandedKeys: expandedKeys,\n      loadingKeys: loadingKeys,\n      currentExpandKeys: currentExpandKeys,\n      onLoadMore: onLoadMore,\n      filterTreeNode: filterTreeNode,\n      onCheck: onCheck,\n      onSelect: onSelect,\n      onExpand: onExpand,\n      onExpandEnd: onExpandEnd,\n      allowDrop: function allowDrop(key, dropPosition) {\n        var node = key2TreeNode.value.get(key);\n        if (node && isFunction(_allowDrop.value)) {\n          return !!_allowDrop.value({\n            dropNode: node.treeNodeData,\n            dropPosition: dropPosition\n          });\n        }\n        return true;\n      },\n      onDragStart: function onDragStart(key, e) {\n        var node = key2TreeNode.value.get(key);\n        dragNode.value = node;\n        if (node) {\n          emit(\"dragStart\", e, node.treeNodeData);\n        }\n      },\n      onDragEnd: function onDragEnd(key, e) {\n        var node = key2TreeNode.value.get(key);\n        dragNode.value = void 0;\n        if (node) {\n          emit(\"dragEnd\", e, node.treeNodeData);\n        }\n      },\n      onDragOver: function onDragOver(key, e) {\n        var node = key2TreeNode.value.get(key);\n        if (node) {\n          emit(\"dragOver\", e, node.treeNodeData);\n        }\n      },\n      onDragLeave: function onDragLeave(key, e) {\n        var node = key2TreeNode.value.get(key);\n        if (node) {\n          emit(\"dragLeave\", e, node.treeNodeData);\n        }\n      },\n      onDrop: function onDrop(key, dropPosition, e) {\n        var node = key2TreeNode.value.get(key);\n        if (dragNode.value && node && !(node.key === dragNode.value.key || node.pathParentKeys.includes(dragNode.value.key || \"\"))) {\n          emit(\"drop\", {\n            e: e,\n            dragNode: dragNode.value.treeNodeData,\n            dropNode: node.treeNodeData,\n            dropPosition: dropPosition\n          });\n        }\n      }\n    });\n    provide(TreeInjectionKey, treeContext);\n    return {\n      classNames: classNames,\n      visibleTreeNodeList: visibleTreeNodeList,\n      treeContext: treeContext,\n      virtualListRef: ref(),\n      computedSelectedKeys: selectedKeys,\n      computedExpandedKeys: expandedKeys,\n      computedCheckedKeys: checkedKeys,\n      computedIndeterminateKeys: indeterminateKeys,\n      getPublicCheckedKeys: getPublicCheckedKeys,\n      getNodes: getNodes,\n      internalCheckNodes: checkNodes,\n      internalSetCheckedKeys: setCheckedKeys,\n      internalSelectNodes: selectNodes,\n      internalSetSelectedKeys: setSelectedKeys,\n      internalExpandNodes: expandNodes,\n      internalSetExpandedKeys: setExpandedKeys\n    };\n  },\n  methods: {\n    toggleCheck: function toggleCheck(key, e) {\n      var _this$treeContext = this.treeContext,\n        key2TreeNode = _this$treeContext.key2TreeNode,\n        onCheck = _this$treeContext.onCheck,\n        checkedKeys = _this$treeContext.checkedKeys;\n      var checked = !checkedKeys.includes(key);\n      var node = key2TreeNode.get(key);\n      if (node && isNodeCheckable(node)) {\n        onCheck(checked, key, e);\n      }\n    },\n    scrollIntoView: function scrollIntoView(options) {\n      this.virtualListRef && this.virtualListRef.scrollTo(options);\n    },\n    getSelectedNodes: function getSelectedNodes() {\n      return this.getNodes(this.computedSelectedKeys);\n    },\n    getCheckedNodes: function getCheckedNodes() {\n      var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      var checkedStrategy = options.checkedStrategy,\n        includeHalfChecked = options.includeHalfChecked;\n      var checkedKeys = this.getPublicCheckedKeys(this.computedCheckedKeys, checkedStrategy);\n      var checkedNodes = this.getNodes(checkedKeys);\n      return [].concat(_toConsumableArray(checkedNodes), _toConsumableArray(includeHalfChecked ? this.getHalfCheckedNodes() : []));\n    },\n    getHalfCheckedNodes: function getHalfCheckedNodes() {\n      return this.getNodes(this.computedIndeterminateKeys);\n    },\n    getExpandedNodes: function getExpandedNodes() {\n      return this.getNodes(this.computedExpandedKeys);\n    },\n    checkAll: function checkAll() {\n      var checked = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var key2TreeNode = this.treeContext.key2TreeNode;\n      var newKeys = checked ? _toConsumableArray(key2TreeNode.keys()).filter(function (key) {\n        var node = key2TreeNode.get(key);\n        return node && isNodeCheckable(node);\n      }) : [];\n      this.internalSetCheckedKeys(newKeys);\n    },\n    checkNode: function checkNode(key) {\n      var checked = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var onlyCheckLeaf = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var checkStrictly = this.checkStrictly,\n        treeContext = this.treeContext;\n      var key2TreeNode = treeContext.key2TreeNode;\n      var isBatch = isArray(key);\n      var keys = (isBatch ? key : [key]).filter(function (key2) {\n        var node = key2TreeNode.get(key2);\n        return node && isNodeCheckable(node) && (checkStrictly || !onlyCheckLeaf || isLeafNode(node));\n      });\n      this.internalCheckNodes(keys, checked, isBatch ? void 0 : key);\n    },\n    selectAll: function selectAll() {\n      var selected = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var key2TreeNode = this.treeContext.key2TreeNode;\n      var newKeys = selected ? _toConsumableArray(key2TreeNode.keys()).filter(function (key) {\n        var node = key2TreeNode.get(key);\n        return node && isNodeSelectable(node);\n      }) : [];\n      this.internalSetSelectedKeys(newKeys);\n    },\n    selectNode: function selectNode(key) {\n      var selected = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var key2TreeNode = this.treeContext.key2TreeNode;\n      var isBatch = isArray(key);\n      var keys = (isBatch ? key : [key]).filter(function (key2) {\n        var node = key2TreeNode.get(key2);\n        return node && isNodeSelectable(node);\n      });\n      this.internalSelectNodes(keys, selected, isBatch ? void 0 : key);\n    },\n    expandAll: function expandAll() {\n      var expanded = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : true;\n      var key2TreeNode = this.treeContext.key2TreeNode;\n      var newKeys = expanded ? _toConsumableArray(key2TreeNode.keys()).filter(function (key) {\n        var node = key2TreeNode.get(key);\n        return node && isNodeExpandable(node);\n      }) : [];\n      this.internalSetExpandedKeys(newKeys);\n    },\n    expandNode: function expandNode(key) {\n      var expanded = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : true;\n      var key2TreeNode = this.treeContext.key2TreeNode;\n      var isBatch = isArray(key);\n      var keys = (isBatch ? key : [key]).filter(function (key2) {\n        var node = key2TreeNode.get(key2);\n        return node && isNodeExpandable(node);\n      });\n      this.internalExpandNodes(keys, expanded, isBatch ? void 0 : key);\n    }\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  var _component_TreeNode = resolveComponent(\"TreeNode\");\n  var _component_VirtualList = resolveComponent(\"VirtualList\");\n  return openBlock(), createElementBlock(\"div\", {\n    \"class\": normalizeClass(_ctx.classNames)\n  }, [_ctx.virtualListProps ? (openBlock(), createBlock(_component_VirtualList, mergeProps({\n    key: 0,\n    ref: \"virtualListRef\"\n  }, _ctx.virtualListProps, {\n    data: _ctx.visibleTreeNodeList\n  }), {\n    item: withCtx(function (_ref4) {\n      var node = _ref4.item;\n      return [createVNode(_component_TreeNode, mergeProps({\n        key: node.key\n      }, node.treeNodeProps), null, 16)];\n    }),\n    _: 1\n  }, 16, [\"data\"])) : (openBlock(true), createElementBlock(Fragment, {\n    key: 1\n  }, renderList(_ctx.visibleTreeNodeList, function (node) {\n    return openBlock(), createBlock(_component_TreeNode, mergeProps({\n      key: node.key\n    }, node.treeNodeProps), null, 16);\n  }), 128))], 2);\n}\nvar _Tree = /* @__PURE__ */_export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { _Tree as default };","map":{"version":3,"names":["defineComponent","toRefs","computed","reactive","ref","provide","resolveComponent","openBlock","createElementBlock","normalizeClass","createBlock","mergeProps","withCtx","createVNode","Fragment","renderList","getPrefixCls","TreeInjectionKey","usePickSlots","isLeafNode","isNodeSelectable","isNodeExpandable","isNodeCheckable","getCheckedStateByCheck","TreeNode","isUndefined","isFunction","isArray","useMergeState","useCheckedState","useTreeData","VirtualList","_export_sfc","_sfc_main","name","components","props","size","type","String","blockNode","Boolean","defaultExpandAll","multiple","checkable","Function","selectable","checkStrictly","checkedStrategy","defaultSelectedKeys","Array","selectedKeys","defaultCheckedKeys","checkedKeys","defaultExpandedKeys","expandedKeys","data","_default","fieldNames","Object","showLine","loadMore","draggable","allowDrop","filterTreeNode","virtualListProps","defaultExpandSelected","defaultExpandChecked","autoExpandParent","halfCheckedKeys","onlyCheckLeaf","animation","actionOnNodeClick","disableSelectActionOnly","emits","select","updateSelectedKeys","check","updateCheckedKeys","updateHalfCheckedKeys","expand","expandKeys","updateExpandedKeys","dragStart","ev","node","dragEnd","dragOver","dragLeave","drop","setup","_ref","emit","slots","_toRefs","propTreeData","propCheckedKeys","propSelectedKeys","propExpandedKeys","prefixCls","classNames","_ref2","concat","_defineProperty","value","switcherIcon","loadingIcon","dragIcon","nodeIcon","nodeTitle","nodeExtra","_useTreeData","treeData","flattenTreeData","key2TreeNode","_useCheckedState","indeterminateKeys","setCheckedState","_useMergeState","_useMergeState2","_slicedToArray","setSelectedState","loadingKeys","dragNode","getDefaultExpandedKeys","expandedKeysSet","Set","forEach","_key","has","get","_toConsumableArray","pathParentKeys","_key2","add","filter","children","length","map","key","addToExpandKeysSet","keys","k","_useMergeState3","_useMergeState4","setExpandState","currentExpandKeys","visibleTreeNodeList","currentExpandKeysSet","_a","passFilter","treeNodeData","isRoot","parentKey","isVisibleNode","every","getPublicCheckedKeys","rawCheckedKeys","rawCheckedStrategy","arguments","undefined","publicCheckedKeys","item","includes","_b","getNodes","emitCheckEvent","options","targetKey","targetChecked","newCheckedKeys","newIndeterminateKeys","event","targetNode","checked","checkedNodes","halfCheckedNodes","e","emitSelectEvent","targetSelected","newSelectedKeys","selected","selectedNodes","emitExpandEvent","targetExpanded","newExpandedKeys","expanded","expandedNodes","setCheckedKeys","_setCheckedState","_setCheckedState2","setSelectedKeys","setExpandedKeys","checkNodes","_getCheckedStateByChe","_getCheckedStateByChe2","selectNodes","selectedKeysSet","expandNodes","onExpandEnd","onCheck","_getCheckedStateByChe3","_getCheckedStateByChe4","onSelect","onExpand","push","index","indexOf","splice","onLoadMore","_ref3","_asyncToGenerator","_regeneratorRuntime","mark","_callee","wrap","_callee$","_context","prev","next","abrupt","v","t0","console","error","stop","_x","apply","treeContext","treeProps","dropPosition","dropNode","onDragStart","onDragEnd","onDragOver","onDragLeave","onDrop","virtualListRef","computedSelectedKeys","computedExpandedKeys","computedCheckedKeys","computedIndeterminateKeys","internalCheckNodes","internalSetCheckedKeys","internalSelectNodes","internalSetSelectedKeys","internalExpandNodes","internalSetExpandedKeys","methods","toggleCheck","_this$treeContext","scrollIntoView","scrollTo","getSelectedNodes","getCheckedNodes","includeHalfChecked","getHalfCheckedNodes","getExpandedNodes","checkAll","newKeys","checkNode","isBatch","key2","selectAll","selectNode","expandAll","expandNode","_sfc_render","_ctx","_cache","$props","$setup","$data","$options","_component_TreeNode","_component_VirtualList","_ref4","treeNodeProps","_","_Tree","default"],"sources":["/root/FrontPlatform/vue-front/node_modules/@arco-design/web-vue/es/tree/tree.js"],"sourcesContent":["import { defineComponent, toRefs, computed, reactive, ref, provide, resolveComponent, openBlock, createElementBlock, normalizeClass, createBlock, mergeProps, withCtx, createVNode, Fragment, renderList } from \"vue\";\nimport { getPrefixCls } from \"../_utils/global-config.js\";\nimport { TreeInjectionKey } from \"./context.js\";\nimport usePickSlots from \"../_hooks/use-pick-slots.js\";\nimport { isLeafNode, isNodeSelectable, isNodeExpandable } from \"./utils/index.js\";\nimport { isNodeCheckable, getCheckedStateByCheck } from \"./utils/check-utils.js\";\nimport TreeNode from \"./node.js\";\nimport { isUndefined, isFunction, isArray } from \"../_utils/is.js\";\nimport useMergeState from \"../_hooks/use-merge-state.js\";\nimport useCheckedState from \"./hooks/use-checked-state.js\";\nimport useTreeData from \"./hooks/use-tree-data.js\";\nimport VirtualList from \"../_components/virtual-list-v2/virtual-list.js\";\nimport _export_sfc from \"../_virtual/plugin-vue_export-helper.js\";\nconst _sfc_main = defineComponent({\n  name: \"Tree\",\n  components: {\n    VirtualList,\n    TreeNode\n  },\n  props: {\n    size: {\n      type: String,\n      default: \"medium\"\n    },\n    blockNode: {\n      type: Boolean\n    },\n    defaultExpandAll: {\n      type: Boolean,\n      default: true\n    },\n    multiple: {\n      type: Boolean\n    },\n    checkable: {\n      type: [Boolean, String, Function],\n      default: false\n    },\n    selectable: {\n      type: [Boolean, Function],\n      default: true\n    },\n    checkStrictly: {\n      type: Boolean\n    },\n    checkedStrategy: {\n      type: String,\n      default: \"all\"\n    },\n    defaultSelectedKeys: {\n      type: Array\n    },\n    selectedKeys: {\n      type: Array\n    },\n    defaultCheckedKeys: {\n      type: Array\n    },\n    checkedKeys: {\n      type: Array\n    },\n    defaultExpandedKeys: {\n      type: Array\n    },\n    expandedKeys: {\n      type: Array\n    },\n    data: {\n      type: Array,\n      default: () => []\n    },\n    fieldNames: {\n      type: Object\n    },\n    showLine: {\n      type: Boolean\n    },\n    loadMore: {\n      type: Function\n    },\n    draggable: {\n      type: Boolean\n    },\n    allowDrop: {\n      type: Function\n    },\n    filterTreeNode: {\n      type: Function\n    },\n    virtualListProps: {\n      type: Object\n    },\n    defaultExpandSelected: {\n      type: Boolean\n    },\n    defaultExpandChecked: {\n      type: Boolean\n    },\n    autoExpandParent: {\n      type: Boolean,\n      default: true\n    },\n    halfCheckedKeys: {\n      type: Array\n    },\n    onlyCheckLeaf: {\n      type: Boolean,\n      default: false\n    },\n    animation: {\n      type: Boolean,\n      default: true\n    },\n    actionOnNodeClick: {\n      type: String\n    },\n    disableSelectActionOnly: {\n      type: Boolean,\n      default: false\n    }\n  },\n  emits: {\n    \"select\": (selectedKeys, data) => true,\n    \"update:selectedKeys\": (selectedKeys) => true,\n    \"check\": (checkedKeys, data) => true,\n    \"update:checkedKeys\": (checkedKeys) => true,\n    \"update:halfCheckedKeys\": (halfCheckedKeys) => true,\n    \"expand\": (expandKeys, data) => true,\n    \"update:expandedKeys\": (expandKeys) => true,\n    \"dragStart\": (ev, node) => true,\n    \"dragEnd\": (ev, node) => true,\n    \"dragOver\": (ev, node) => true,\n    \"dragLeave\": (ev, node) => true,\n    \"drop\": (data) => true\n  },\n  setup(props, { emit, slots }) {\n    const {\n      data: propTreeData,\n      showLine,\n      multiple,\n      loadMore,\n      checkStrictly,\n      checkedKeys: propCheckedKeys,\n      defaultCheckedKeys,\n      selectedKeys: propSelectedKeys,\n      defaultSelectedKeys,\n      expandedKeys: propExpandedKeys,\n      defaultExpandedKeys,\n      checkedStrategy,\n      selectable,\n      checkable,\n      blockNode,\n      fieldNames,\n      size,\n      defaultExpandAll,\n      filterTreeNode,\n      draggable,\n      allowDrop,\n      defaultExpandSelected,\n      defaultExpandChecked,\n      autoExpandParent,\n      halfCheckedKeys,\n      onlyCheckLeaf,\n      animation\n    } = toRefs(props);\n    const prefixCls = getPrefixCls(\"tree\");\n    const classNames = computed(() => [\n      `${prefixCls}`,\n      {\n        [`${prefixCls}-checkable`]: checkable.value,\n        [`${prefixCls}-show-line`]: showLine.value\n      },\n      `${prefixCls}-size-${size.value}`\n    ]);\n    const switcherIcon = usePickSlots(slots, \"switcher-icon\");\n    const loadingIcon = usePickSlots(slots, \"loading-icon\");\n    const dragIcon = usePickSlots(slots, \"drag-icon\");\n    const nodeIcon = usePickSlots(slots, \"icon\");\n    const nodeTitle = usePickSlots(slots, \"title\");\n    const nodeExtra = usePickSlots(slots, \"extra\");\n    const { treeData, flattenTreeData, key2TreeNode } = useTreeData(reactive({\n      treeData: propTreeData,\n      selectable,\n      showLine,\n      blockNode,\n      checkable,\n      fieldNames,\n      loadMore,\n      draggable\n    }));\n    const { checkedKeys, indeterminateKeys, setCheckedState } = useCheckedState(reactive({\n      defaultCheckedKeys,\n      checkedKeys: propCheckedKeys,\n      checkStrictly,\n      key2TreeNode,\n      halfCheckedKeys,\n      onlyCheckLeaf\n    }));\n    const [selectedKeys, setSelectedState] = useMergeState((defaultSelectedKeys == null ? void 0 : defaultSelectedKeys.value) || [], reactive({\n      value: propSelectedKeys\n    }));\n    const loadingKeys = ref([]);\n    const dragNode = ref();\n    function getDefaultExpandedKeys() {\n      if (defaultExpandedKeys == null ? void 0 : defaultExpandedKeys.value) {\n        const expandedKeysSet = new Set([]);\n        defaultExpandedKeys.value.forEach((_key) => {\n          if (expandedKeysSet.has(_key))\n            return;\n          const node = key2TreeNode.value.get(_key);\n          if (!node)\n            return;\n          [\n            ...autoExpandParent.value ? node.pathParentKeys : [],\n            _key\n          ].forEach((_key2) => expandedKeysSet.add(_key2));\n        });\n        return [...expandedKeysSet];\n      }\n      if (defaultExpandAll.value) {\n        return flattenTreeData.value.filter((node) => node.children && node.children.length).map((node) => node.key);\n      }\n      if (defaultExpandSelected.value || defaultExpandChecked.value) {\n        const expandedKeysSet = new Set([]);\n        const addToExpandKeysSet = (keys) => {\n          keys.forEach((key) => {\n            const node = key2TreeNode.value.get(key);\n            if (!node)\n              return;\n            (node.pathParentKeys || []).forEach((k) => expandedKeysSet.add(k));\n          });\n        };\n        if (defaultExpandSelected.value) {\n          addToExpandKeysSet(selectedKeys.value);\n        }\n        if (defaultExpandChecked.value) {\n          addToExpandKeysSet(checkedKeys.value);\n        }\n        return [...expandedKeysSet];\n      }\n      return [];\n    }\n    const [expandedKeys, setExpandState] = useMergeState(getDefaultExpandedKeys(), reactive({\n      value: propExpandedKeys\n    }));\n    const currentExpandKeys = ref([]);\n    const visibleTreeNodeList = computed(() => {\n      const expandedKeysSet = new Set(expandedKeys.value);\n      const currentExpandKeysSet = new Set(currentExpandKeys.value);\n      return flattenTreeData.value.filter((node) => {\n        var _a;\n        const passFilter = !filterTreeNode || !filterTreeNode.value || (filterTreeNode == null ? void 0 : filterTreeNode.value(node.treeNodeData));\n        if (!passFilter)\n          return false;\n        const isRoot = isUndefined(node.parentKey);\n        const isVisibleNode = (_a = node.pathParentKeys) == null ? void 0 : _a.every((_key) => expandedKeysSet.has(_key) && !currentExpandKeysSet.has(_key));\n        return isRoot || isVisibleNode;\n      });\n    });\n    function getPublicCheckedKeys(rawCheckedKeys, rawCheckedStrategy = checkedStrategy.value) {\n      let publicCheckedKeys = [...rawCheckedKeys];\n      if (rawCheckedStrategy === \"parent\") {\n        publicCheckedKeys = rawCheckedKeys.filter((_key) => {\n          const item = key2TreeNode.value.get(_key);\n          return item && !(!isUndefined(item.parentKey) && rawCheckedKeys.includes(item.parentKey));\n        });\n      } else if (rawCheckedStrategy === \"child\") {\n        publicCheckedKeys = rawCheckedKeys.filter((_key) => {\n          var _a, _b;\n          return !((_b = (_a = key2TreeNode.value.get(_key)) == null ? void 0 : _a.children) == null ? void 0 : _b.length);\n        });\n      }\n      return publicCheckedKeys;\n    }\n    function getNodes(keys) {\n      return keys.map((key) => {\n        var _a;\n        return ((_a = key2TreeNode.value.get(key)) == null ? void 0 : _a.treeNodeData) || void 0;\n      }).filter(Boolean);\n    }\n    function emitCheckEvent(options) {\n      const {\n        targetKey,\n        targetChecked,\n        newCheckedKeys,\n        newIndeterminateKeys,\n        event\n      } = options;\n      const targetNode = targetKey ? key2TreeNode.value.get(targetKey) : void 0;\n      const publicCheckedKeys = getPublicCheckedKeys(newCheckedKeys);\n      emit(\"check\", publicCheckedKeys, {\n        checked: targetChecked,\n        node: targetNode == null ? void 0 : targetNode.treeNodeData,\n        checkedNodes: getNodes(publicCheckedKeys),\n        halfCheckedKeys: newIndeterminateKeys,\n        halfCheckedNodes: getNodes(newIndeterminateKeys),\n        e: event\n      });\n      emit(\"update:checkedKeys\", publicCheckedKeys);\n      emit(\"update:halfCheckedKeys\", newIndeterminateKeys);\n    }\n    function emitSelectEvent(options) {\n      const { targetKey, targetSelected, newSelectedKeys, event } = options;\n      const targetNode = targetKey ? key2TreeNode.value.get(targetKey) : void 0;\n      emit(\"select\", newSelectedKeys, {\n        selected: targetSelected,\n        node: targetNode == null ? void 0 : targetNode.treeNodeData,\n        selectedNodes: getNodes(newSelectedKeys),\n        e: event\n      });\n      emit(\"update:selectedKeys\", newSelectedKeys);\n    }\n    function emitExpandEvent(options) {\n      const { targetKey, targetExpanded, newExpandedKeys, event } = options;\n      const targetNode = targetKey ? key2TreeNode.value.get(targetKey) : void 0;\n      emit(\"expand\", newExpandedKeys, {\n        expanded: targetExpanded,\n        node: targetNode == null ? void 0 : targetNode.treeNodeData,\n        expandedNodes: getNodes(newExpandedKeys),\n        e: event\n      });\n      emit(\"update:expandedKeys\", newExpandedKeys);\n    }\n    function setCheckedKeys(keys) {\n      const [newCheckedKeys, newIndeterminateKeys] = setCheckedState(keys, [], true);\n      emitCheckEvent({ newCheckedKeys, newIndeterminateKeys });\n    }\n    function setSelectedKeys(keys) {\n      let newSelectedKeys = keys;\n      if (!multiple.value && keys.length > 1) {\n        newSelectedKeys = [keys[0]];\n      }\n      setSelectedState(newSelectedKeys);\n      emitSelectEvent({\n        newSelectedKeys\n      });\n    }\n    function setExpandedKeys(keys) {\n      currentExpandKeys.value = [];\n      setExpandState(keys);\n      emitExpandEvent({ newExpandedKeys: keys });\n    }\n    function checkNodes(keys, checked, targetKey) {\n      if (!keys.length)\n        return;\n      let newCheckedKeys = [...checkedKeys.value];\n      let newIndeterminateKeys = [...indeterminateKeys.value];\n      keys.forEach((key) => {\n        const node = key2TreeNode.value.get(key);\n        if (node) {\n          [newCheckedKeys, newIndeterminateKeys] = getCheckedStateByCheck({\n            node,\n            checked,\n            checkedKeys: [...newCheckedKeys],\n            indeterminateKeys: [...newIndeterminateKeys],\n            checkStrictly: checkStrictly.value\n          });\n        }\n      });\n      setCheckedState(newCheckedKeys, newIndeterminateKeys);\n      emitCheckEvent({\n        targetKey,\n        targetChecked: isUndefined(targetKey) ? void 0 : checked,\n        newCheckedKeys,\n        newIndeterminateKeys\n      });\n    }\n    function selectNodes(keys, selected, targetKey) {\n      if (!keys.length)\n        return;\n      let newSelectedKeys;\n      if (multiple.value) {\n        const selectedKeysSet = new Set(selectedKeys.value);\n        keys.forEach((key) => {\n          selected ? selectedKeysSet.add(key) : selectedKeysSet.delete(key);\n        });\n        newSelectedKeys = [...selectedKeysSet];\n      } else {\n        newSelectedKeys = selected ? [keys[0]] : [];\n      }\n      setSelectedState(newSelectedKeys);\n      emitSelectEvent({\n        targetKey,\n        targetSelected: isUndefined(targetKey) ? void 0 : selected,\n        newSelectedKeys\n      });\n    }\n    function expandNodes(keys, expanded, targetKey) {\n      const expandedKeysSet = new Set(expandedKeys.value);\n      keys.forEach((key) => {\n        expanded ? expandedKeysSet.add(key) : expandedKeysSet.delete(key);\n        onExpandEnd(key);\n      });\n      const newExpandedKeys = [...expandedKeysSet];\n      setExpandState(newExpandedKeys);\n      emitExpandEvent({\n        targetKey,\n        targetExpanded: isUndefined(targetKey) ? void 0 : expanded,\n        newExpandedKeys\n      });\n    }\n    function onCheck(checked, key, e) {\n      const node = key2TreeNode.value.get(key);\n      if (!node)\n        return;\n      const [newCheckedKeys, newIndeterminateKeys] = getCheckedStateByCheck({\n        node,\n        checked,\n        checkedKeys: checkedKeys.value,\n        indeterminateKeys: indeterminateKeys.value,\n        checkStrictly: checkStrictly.value\n      });\n      setCheckedState(newCheckedKeys, newIndeterminateKeys);\n      emitCheckEvent({\n        targetKey: key,\n        targetChecked: checked,\n        newCheckedKeys,\n        newIndeterminateKeys,\n        event: e\n      });\n    }\n    function onSelect(key, e) {\n      const node = key2TreeNode.value.get(key);\n      if (!node)\n        return;\n      let newSelectedKeys;\n      let selected;\n      if (multiple.value) {\n        const selectedKeysSet = new Set(selectedKeys.value);\n        selected = !selectedKeysSet.has(key);\n        selected ? selectedKeysSet.add(key) : selectedKeysSet.delete(key);\n        newSelectedKeys = [...selectedKeysSet];\n      } else {\n        selected = true;\n        newSelectedKeys = [key];\n      }\n      setSelectedState(newSelectedKeys);\n      emitSelectEvent({\n        targetKey: key,\n        targetSelected: selected,\n        newSelectedKeys,\n        event: e\n      });\n    }\n    function onExpand(expanded, key, e) {\n      if (currentExpandKeys.value.includes(key))\n        return;\n      const node = key2TreeNode.value.get(key);\n      if (!node)\n        return;\n      const expandedKeysSet = new Set(expandedKeys.value);\n      expanded ? expandedKeysSet.add(key) : expandedKeysSet.delete(key);\n      const newExpandedKeys = [...expandedKeysSet];\n      setExpandState(newExpandedKeys);\n      if (animation.value) {\n        currentExpandKeys.value.push(key);\n      }\n      emitExpandEvent({\n        targetKey: key,\n        targetExpanded: expanded,\n        newExpandedKeys,\n        event: e\n      });\n    }\n    function onExpandEnd(key) {\n      const index = currentExpandKeys.value.indexOf(key);\n      currentExpandKeys.value.splice(index, 1);\n    }\n    const onLoadMore = computed(() => (loadMore == null ? void 0 : loadMore.value) ? async (key) => {\n      if (!isFunction(loadMore.value))\n        return;\n      const node = key2TreeNode.value.get(key);\n      if (!node)\n        return;\n      const { treeNodeData } = node;\n      loadingKeys.value = [...new Set([...loadingKeys.value, key])];\n      try {\n        await loadMore.value(treeNodeData);\n        loadingKeys.value = loadingKeys.value.filter((v) => v !== key);\n        onExpand(true, key);\n        if (checkedKeys.value.includes(key)) {\n          onCheck(true, key);\n        }\n      } catch (err) {\n        loadingKeys.value = loadingKeys.value.filter((v) => v !== key);\n        console.error(\"[tree]load data error: \", err);\n      }\n    } : void 0);\n    const treeContext = reactive({\n      treeProps: props,\n      switcherIcon,\n      loadingIcon,\n      dragIcon,\n      nodeIcon,\n      nodeTitle,\n      nodeExtra,\n      treeData,\n      flattenTreeData,\n      key2TreeNode,\n      checkedKeys,\n      indeterminateKeys,\n      selectedKeys,\n      expandedKeys,\n      loadingKeys,\n      currentExpandKeys,\n      onLoadMore,\n      filterTreeNode,\n      onCheck,\n      onSelect,\n      onExpand,\n      onExpandEnd,\n      allowDrop(key, dropPosition) {\n        const node = key2TreeNode.value.get(key);\n        if (node && isFunction(allowDrop.value)) {\n          return !!allowDrop.value({\n            dropNode: node.treeNodeData,\n            dropPosition\n          });\n        }\n        return true;\n      },\n      onDragStart(key, e) {\n        const node = key2TreeNode.value.get(key);\n        dragNode.value = node;\n        if (node) {\n          emit(\"dragStart\", e, node.treeNodeData);\n        }\n      },\n      onDragEnd(key, e) {\n        const node = key2TreeNode.value.get(key);\n        dragNode.value = void 0;\n        if (node) {\n          emit(\"dragEnd\", e, node.treeNodeData);\n        }\n      },\n      onDragOver(key, e) {\n        const node = key2TreeNode.value.get(key);\n        if (node) {\n          emit(\"dragOver\", e, node.treeNodeData);\n        }\n      },\n      onDragLeave(key, e) {\n        const node = key2TreeNode.value.get(key);\n        if (node) {\n          emit(\"dragLeave\", e, node.treeNodeData);\n        }\n      },\n      onDrop(key, dropPosition, e) {\n        const node = key2TreeNode.value.get(key);\n        if (dragNode.value && node && !(node.key === dragNode.value.key || node.pathParentKeys.includes(dragNode.value.key || \"\"))) {\n          emit(\"drop\", {\n            e,\n            dragNode: dragNode.value.treeNodeData,\n            dropNode: node.treeNodeData,\n            dropPosition\n          });\n        }\n      }\n    });\n    provide(TreeInjectionKey, treeContext);\n    return {\n      classNames,\n      visibleTreeNodeList,\n      treeContext,\n      virtualListRef: ref(),\n      computedSelectedKeys: selectedKeys,\n      computedExpandedKeys: expandedKeys,\n      computedCheckedKeys: checkedKeys,\n      computedIndeterminateKeys: indeterminateKeys,\n      getPublicCheckedKeys,\n      getNodes,\n      internalCheckNodes: checkNodes,\n      internalSetCheckedKeys: setCheckedKeys,\n      internalSelectNodes: selectNodes,\n      internalSetSelectedKeys: setSelectedKeys,\n      internalExpandNodes: expandNodes,\n      internalSetExpandedKeys: setExpandedKeys\n    };\n  },\n  methods: {\n    toggleCheck(key, e) {\n      const { key2TreeNode, onCheck, checkedKeys } = this.treeContext;\n      const checked = !checkedKeys.includes(key);\n      const node = key2TreeNode.get(key);\n      if (node && isNodeCheckable(node)) {\n        onCheck(checked, key, e);\n      }\n    },\n    scrollIntoView(options) {\n      this.virtualListRef && this.virtualListRef.scrollTo(options);\n    },\n    getSelectedNodes() {\n      return this.getNodes(this.computedSelectedKeys);\n    },\n    getCheckedNodes(options = {}) {\n      const { checkedStrategy, includeHalfChecked } = options;\n      const checkedKeys = this.getPublicCheckedKeys(this.computedCheckedKeys, checkedStrategy);\n      const checkedNodes = this.getNodes(checkedKeys);\n      return [\n        ...checkedNodes,\n        ...includeHalfChecked ? this.getHalfCheckedNodes() : []\n      ];\n    },\n    getHalfCheckedNodes() {\n      return this.getNodes(this.computedIndeterminateKeys);\n    },\n    getExpandedNodes() {\n      return this.getNodes(this.computedExpandedKeys);\n    },\n    checkAll(checked = true) {\n      const { key2TreeNode } = this.treeContext;\n      const newKeys = checked ? [...key2TreeNode.keys()].filter((key) => {\n        const node = key2TreeNode.get(key);\n        return node && isNodeCheckable(node);\n      }) : [];\n      this.internalSetCheckedKeys(newKeys);\n    },\n    checkNode(key, checked = true, onlyCheckLeaf = false) {\n      const { checkStrictly, treeContext } = this;\n      const { key2TreeNode } = treeContext;\n      const isBatch = isArray(key);\n      const keys = (isBatch ? key : [key]).filter((key2) => {\n        const node = key2TreeNode.get(key2);\n        return node && isNodeCheckable(node) && (checkStrictly || !onlyCheckLeaf || isLeafNode(node));\n      });\n      this.internalCheckNodes(keys, checked, isBatch ? void 0 : key);\n    },\n    selectAll(selected = true) {\n      const { key2TreeNode } = this.treeContext;\n      const newKeys = selected ? [...key2TreeNode.keys()].filter((key) => {\n        const node = key2TreeNode.get(key);\n        return node && isNodeSelectable(node);\n      }) : [];\n      this.internalSetSelectedKeys(newKeys);\n    },\n    selectNode(key, selected = true) {\n      const { key2TreeNode } = this.treeContext;\n      const isBatch = isArray(key);\n      const keys = (isBatch ? key : [key]).filter((key2) => {\n        const node = key2TreeNode.get(key2);\n        return node && isNodeSelectable(node);\n      });\n      this.internalSelectNodes(keys, selected, isBatch ? void 0 : key);\n    },\n    expandAll(expanded = true) {\n      const { key2TreeNode } = this.treeContext;\n      const newKeys = expanded ? [...key2TreeNode.keys()].filter((key) => {\n        const node = key2TreeNode.get(key);\n        return node && isNodeExpandable(node);\n      }) : [];\n      this.internalSetExpandedKeys(newKeys);\n    },\n    expandNode(key, expanded = true) {\n      const { key2TreeNode } = this.treeContext;\n      const isBatch = isArray(key);\n      const keys = (isBatch ? key : [key]).filter((key2) => {\n        const node = key2TreeNode.get(key2);\n        return node && isNodeExpandable(node);\n      });\n      this.internalExpandNodes(keys, expanded, isBatch ? void 0 : key);\n    }\n  }\n});\nfunction _sfc_render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_TreeNode = resolveComponent(\"TreeNode\");\n  const _component_VirtualList = resolveComponent(\"VirtualList\");\n  return openBlock(), createElementBlock(\"div\", {\n    class: normalizeClass(_ctx.classNames)\n  }, [\n    _ctx.virtualListProps ? (openBlock(), createBlock(_component_VirtualList, mergeProps({\n      key: 0,\n      ref: \"virtualListRef\"\n    }, _ctx.virtualListProps, { data: _ctx.visibleTreeNodeList }), {\n      item: withCtx(({ item: node }) => [\n        createVNode(_component_TreeNode, mergeProps({\n          key: node.key\n        }, node.treeNodeProps), null, 16)\n      ]),\n      _: 1\n    }, 16, [\"data\"])) : (openBlock(true), createElementBlock(Fragment, { key: 1 }, renderList(_ctx.visibleTreeNodeList, (node) => {\n      return openBlock(), createBlock(_component_TreeNode, mergeProps({\n        key: node.key\n      }, node.treeNodeProps), null, 16);\n    }), 128))\n  ], 2);\n}\nvar _Tree = /* @__PURE__ */ _export_sfc(_sfc_main, [[\"render\", _sfc_render]]);\nexport { _Tree as default };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}