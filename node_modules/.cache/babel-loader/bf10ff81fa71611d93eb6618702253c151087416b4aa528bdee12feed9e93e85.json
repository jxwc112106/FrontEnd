{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport axios from \"axios\";\nimport querystring from \"querystring\";\n// 参考文档： https://www.kancloud.cn/yunye/axios/234845\nvar errorHandle = function errorHandle(status, info) {\n  switch (status) {\n    case 400:\n      console.log(\"语义错误\");\n      break;\n    case 401:\n      console.log(\"服务器认证失败\");\n      break;\n    case 403:\n      console.log(\"服务器拒绝访问\");\n      break;\n    case 500:\n      console.log(\"服务器内部错误\");\n      break;\n    case 502:\n      console.log(\"服务器无响应\");\n      break;\n    default:\n      console.log(info);\n      break;\n  }\n};\nvar instance = axios.create({\n  // 网络请求的公共配置\n  timeout: 5000\n});\n\n// 拦截器最常用\n\n//发送数据之前\n// instance.interceptors.request.use(\n//     config =>{\n//         if(config.method === \"post\") {\n//             config.data = querystring.stringify(config.data)\n//         }\n//         // 包含网络请求的所有信息\n//         return config\n//     },\n//     error =>{\n//         return Promise.reject(error)\n//     }\n// )\n\n//获取数据之前\ninstance.interceptors.response.use(function (response) {\n  return response.status === 200 ? Promise.resolve(response) : Promise.reject(response);\n}, function (error) {\n  var response = error.response;\n  errorHandle(response.status, response.info);\n});\nexport default instance;","map":{"version":3,"names":["axios","querystring","errorHandle","status","info","console","log","instance","create","timeout","interceptors","response","use","Promise","resolve","reject","error"],"sources":["/root/FrontPlatform/vue-front/src/utils/network.js"],"sourcesContent":["import axios from \"axios\"\nimport querystring from \"querystring\"\n// 参考文档： https://www.kancloud.cn/yunye/axios/234845\nconst errorHandle = (status, info) => {\n    switch(status) {\n        case 400:\n            console.log(\"语义错误\");\n            break;\n        case 401:\n            console.log(\"服务器认证失败\");\n            break;\n        case 403:\n            console.log(\"服务器拒绝访问\");\n            break;\n        case 500:\n            console.log(\"服务器内部错误\");\n            break;\n        case 502:\n            console.log(\"服务器无响应\");\n            break;\n        default:\n            console.log(info);\n            break;\n    }\n}\n\nconst instance = axios.create({\n    // 网络请求的公共配置\n    timeout:5000\n})\n\n// 拦截器最常用\n\n//发送数据之前\n// instance.interceptors.request.use(\n//     config =>{\n//         if(config.method === \"post\") {\n//             config.data = querystring.stringify(config.data)\n//         }\n//         // 包含网络请求的所有信息\n//         return config\n//     },\n//     error =>{\n//         return Promise.reject(error)\n//     }\n// )\n\n//获取数据之前\ninstance.interceptors.response.use(\n    response =>{\n        return response.status === 200 ? Promise.resolve(response) : Promise.reject(response)\n    },\n    error =>{\n        const { response } = error;\n        errorHandle(response.status, response.info)\n    }\n)\n\nexport default instance;"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,WAAW,MAAM,aAAa;AACrC;AACA,IAAMC,WAAW,GAAG,SAAdA,WAAWA,CAAIC,MAAM,EAAEC,IAAI,EAAK;EAClC,QAAOD,MAAM;IACT,KAAK,GAAG;MACJE,OAAO,CAACC,GAAG,CAAC,MAAM,CAAC;MACnB;IACJ,KAAK,GAAG;MACJD,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;MACtB;IACJ,KAAK,GAAG;MACJD,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;MACtB;IACJ,KAAK,GAAG;MACJD,OAAO,CAACC,GAAG,CAAC,SAAS,CAAC;MACtB;IACJ,KAAK,GAAG;MACJD,OAAO,CAACC,GAAG,CAAC,QAAQ,CAAC;MACrB;IACJ;MACID,OAAO,CAACC,GAAG,CAACF,IAAI,CAAC;MACjB;EAAM;AAElB,CAAC;AAED,IAAMG,QAAQ,GAAGP,KAAK,CAACQ,MAAM,CAAC;EAC1B;EACAC,OAAO,EAAC;AACZ,CAAC,CAAC;;AAEF;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACAF,QAAQ,CAACG,YAAY,CAACC,QAAQ,CAACC,GAAG,CAC9B,UAAAD,QAAQ,EAAG;EACP,OAAOA,QAAQ,CAACR,MAAM,KAAK,GAAG,GAAGU,OAAO,CAACC,OAAO,CAACH,QAAQ,CAAC,GAAGE,OAAO,CAACE,MAAM,CAACJ,QAAQ,CAAC;AACzF,CAAC,EACD,UAAAK,KAAK,EAAG;EACJ,IAAQL,QAAQ,GAAKK,KAAK,CAAlBL,QAAQ;EAChBT,WAAW,CAACS,QAAQ,CAACR,MAAM,EAAEQ,QAAQ,CAACP,IAAI,CAAC;AAC/C,CAAC,CACJ;AAED,eAAeG,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}