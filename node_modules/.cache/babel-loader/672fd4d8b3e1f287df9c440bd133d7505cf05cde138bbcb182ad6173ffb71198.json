{"ast":null,"code":"import \"core-js/modules/es.array.for-each.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/es.map.js\";\nimport \"core-js/modules/es.string.iterator.js\";\nimport \"core-js/modules/web.dom-collections.iterator.js\";\nimport { isBoolean } from \"../../_utils/is.js\";\nfunction getFlattenTreeData(tree) {\n  var flattenTreeData = [];\n  function preOrder(tree2) {\n    if (!tree2) return;\n    tree2.forEach(function (node) {\n      flattenTreeData.push(node);\n      preOrder(node.children);\n    });\n  }\n  preOrder(tree);\n  return flattenTreeData;\n}\nfunction getKey2TreeNode(flattenTreeData) {\n  var key2TreeNode = new Map();\n  flattenTreeData.forEach(function (node) {\n    key2TreeNode.set(node.key, node);\n  });\n  return key2TreeNode;\n}\nfunction isNodeSelectable(node) {\n  return node.selectable && !node.disabled;\n}\nfunction isNodeExpandable(node) {\n  return !node.isLeaf && node.children;\n}\nfunction isLeafNode(node) {\n  if (isBoolean(node.isLeaf)) return node.isLeaf;\n  return !node.children;\n}\nexport { getFlattenTreeData, getKey2TreeNode, isLeafNode, isNodeExpandable, isNodeSelectable };","map":{"version":3,"names":["isBoolean","getFlattenTreeData","tree","flattenTreeData","preOrder","tree2","forEach","node","push","children","getKey2TreeNode","key2TreeNode","Map","set","key","isNodeSelectable","selectable","disabled","isNodeExpandable","isLeaf","isLeafNode"],"sources":["/root/FrontPlatform/vue-front/node_modules/@arco-design/web-vue/es/tree/utils/index.js"],"sourcesContent":["import { isBoolean } from \"../../_utils/is.js\";\nfunction getFlattenTreeData(tree) {\n  const flattenTreeData = [];\n  function preOrder(tree2) {\n    if (!tree2)\n      return;\n    tree2.forEach((node) => {\n      flattenTreeData.push(node);\n      preOrder(node.children);\n    });\n  }\n  preOrder(tree);\n  return flattenTreeData;\n}\nfunction getKey2TreeNode(flattenTreeData) {\n  const key2TreeNode = new Map();\n  flattenTreeData.forEach((node) => {\n    key2TreeNode.set(node.key, node);\n  });\n  return key2TreeNode;\n}\nfunction isNodeSelectable(node) {\n  return node.selectable && !node.disabled;\n}\nfunction isNodeExpandable(node) {\n  return !node.isLeaf && node.children;\n}\nfunction isLeafNode(node) {\n  if (isBoolean(node.isLeaf))\n    return node.isLeaf;\n  return !node.children;\n}\nexport { getFlattenTreeData, getKey2TreeNode, isLeafNode, isNodeExpandable, isNodeSelectable };\n"],"mappings":";;;;;;;AAAA,SAASA,SAAS,QAAQ,oBAAoB;AAC9C,SAASC,kBAAkBA,CAACC,IAAI,EAAE;EAChC,IAAMC,eAAe,GAAG,EAAE;EAC1B,SAASC,QAAQA,CAACC,KAAK,EAAE;IACvB,IAAI,CAACA,KAAK,EACR;IACFA,KAAK,CAACC,OAAO,CAAC,UAACC,IAAI,EAAK;MACtBJ,eAAe,CAACK,IAAI,CAACD,IAAI,CAAC;MAC1BH,QAAQ,CAACG,IAAI,CAACE,QAAQ,CAAC;IACzB,CAAC,CAAC;EACJ;EACAL,QAAQ,CAACF,IAAI,CAAC;EACd,OAAOC,eAAe;AACxB;AACA,SAASO,eAAeA,CAACP,eAAe,EAAE;EACxC,IAAMQ,YAAY,GAAG,IAAIC,GAAG,EAAE;EAC9BT,eAAe,CAACG,OAAO,CAAC,UAACC,IAAI,EAAK;IAChCI,YAAY,CAACE,GAAG,CAACN,IAAI,CAACO,GAAG,EAAEP,IAAI,CAAC;EAClC,CAAC,CAAC;EACF,OAAOI,YAAY;AACrB;AACA,SAASI,gBAAgBA,CAACR,IAAI,EAAE;EAC9B,OAAOA,IAAI,CAACS,UAAU,IAAI,CAACT,IAAI,CAACU,QAAQ;AAC1C;AACA,SAASC,gBAAgBA,CAACX,IAAI,EAAE;EAC9B,OAAO,CAACA,IAAI,CAACY,MAAM,IAAIZ,IAAI,CAACE,QAAQ;AACtC;AACA,SAASW,UAAUA,CAACb,IAAI,EAAE;EACxB,IAAIP,SAAS,CAACO,IAAI,CAACY,MAAM,CAAC,EACxB,OAAOZ,IAAI,CAACY,MAAM;EACpB,OAAO,CAACZ,IAAI,CAACE,QAAQ;AACvB;AACA,SAASR,kBAAkB,EAAES,eAAe,EAAEU,UAAU,EAAEF,gBAAgB,EAAEH,gBAAgB"},"metadata":{},"sourceType":"module","externalDependencies":[]}