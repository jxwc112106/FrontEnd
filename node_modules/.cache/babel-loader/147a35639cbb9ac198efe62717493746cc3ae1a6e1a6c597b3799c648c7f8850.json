{"ast":null,"code":"import _slicedToArray from \"/root/FrontPlatform/vue-front/node_modules/@babel/runtime/helpers/esm/slicedToArray.js\";\nimport \"core-js/modules/es.array.reduce.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/es.array.index-of.js\";\nimport \"core-js/modules/es.regexp.exec.js\";\nimport \"core-js/modules/es.string.replace.js\";\nimport \"core-js/modules/es.regexp.constructor.js\";\nimport \"core-js/modules/es.regexp.dot-all.js\";\nimport \"core-js/modules/es.regexp.sticky.js\";\nimport \"core-js/modules/es.regexp.to-string.js\";\nimport \"core-js/modules/es.string.pad-start.js\";\nvar units = [[\"Y\", 1e3 * 60 * 60 * 24 * 365], [\"M\", 1e3 * 60 * 60 * 24 * 30], [\"D\", 1e3 * 60 * 60 * 24], [\"H\", 1e3 * 60 * 60], [\"m\", 1e3 * 60], [\"s\", 1e3], [\"S\", 1]];\nfunction getDateString(millisecond, format) {\n  var leftMillisecond = millisecond;\n  return units.reduce(function (current, _ref) {\n    var _ref2 = _slicedToArray(_ref, 2),\n      name = _ref2[0],\n      unit = _ref2[1];\n    if (current.indexOf(name) !== -1) {\n      var value = Math.floor(leftMillisecond / unit);\n      leftMillisecond -= value * unit;\n      return current.replace(new RegExp(\"\".concat(name, \"+\"), \"g\"), function (match) {\n        var len = match.length;\n        return String(value).padStart(len, \"0\");\n      });\n    }\n    return current;\n  }, format);\n}\nexport { getDateString };","map":{"version":3,"names":["units","getDateString","millisecond","format","leftMillisecond","reduce","current","_ref","_ref2","_slicedToArray","name","unit","indexOf","value","Math","floor","replace","RegExp","concat","match","len","length","String","padStart"],"sources":["/root/FrontPlatform/vue-front/node_modules/@arco-design/web-vue/es/statistic/utils.js"],"sourcesContent":["const units = [\n  [\"Y\", 1e3 * 60 * 60 * 24 * 365],\n  [\"M\", 1e3 * 60 * 60 * 24 * 30],\n  [\"D\", 1e3 * 60 * 60 * 24],\n  [\"H\", 1e3 * 60 * 60],\n  [\"m\", 1e3 * 60],\n  [\"s\", 1e3],\n  [\"S\", 1]\n];\nfunction getDateString(millisecond, format) {\n  let leftMillisecond = millisecond;\n  return units.reduce((current, [name, unit]) => {\n    if (current.indexOf(name) !== -1) {\n      const value = Math.floor(leftMillisecond / unit);\n      leftMillisecond -= value * unit;\n      return current.replace(new RegExp(`${name}+`, \"g\"), (match) => {\n        const len = match.length;\n        return String(value).padStart(len, \"0\");\n      });\n    }\n    return current;\n  }, format);\n}\nexport { getDateString };\n"],"mappings":";;;;;;;;;;;AAAA,IAAMA,KAAK,GAAG,CACZ,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,GAAG,CAAC,EAC/B,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EAC9B,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,CAAC,EACzB,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,GAAG,EAAE,CAAC,EACpB,CAAC,GAAG,EAAE,GAAG,GAAG,EAAE,CAAC,EACf,CAAC,GAAG,EAAE,GAAG,CAAC,EACV,CAAC,GAAG,EAAE,CAAC,CAAC,CACT;AACD,SAASC,aAAaA,CAACC,WAAW,EAAEC,MAAM,EAAE;EAC1C,IAAIC,eAAe,GAAGF,WAAW;EACjC,OAAOF,KAAK,CAACK,MAAM,CAAC,UAACC,OAAO,EAAAC,IAAA,EAAmB;IAAA,IAAAC,KAAA,GAAAC,cAAA,CAAAF,IAAA;MAAhBG,IAAI,GAAAF,KAAA;MAAEG,IAAI,GAAAH,KAAA;IACvC,IAAIF,OAAO,CAACM,OAAO,CAACF,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;MAChC,IAAMG,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACX,eAAe,GAAGO,IAAI,CAAC;MAChDP,eAAe,IAAIS,KAAK,GAAGF,IAAI;MAC/B,OAAOL,OAAO,CAACU,OAAO,CAAC,IAAIC,MAAM,IAAAC,MAAA,CAAIR,IAAI,QAAK,GAAG,CAAC,EAAE,UAACS,KAAK,EAAK;QAC7D,IAAMC,GAAG,GAAGD,KAAK,CAACE,MAAM;QACxB,OAAOC,MAAM,CAACT,KAAK,CAAC,CAACU,QAAQ,CAACH,GAAG,EAAE,GAAG,CAAC;MACzC,CAAC,CAAC;IACJ;IACA,OAAOd,OAAO;EAChB,CAAC,EAAEH,MAAM,CAAC;AACZ;AACA,SAASF,aAAa"},"metadata":{},"sourceType":"module","externalDependencies":[]}